// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/delivery_v2.proto

package deliverypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeliveryService_GetPackageInfo_FullMethodName = "/delivery.v2.DeliveryService/GetPackageInfo"
	DeliveryService_GetNewPackages_FullMethodName = "/delivery.v2.DeliveryService/GetNewPackages"
	DeliveryService_AddPackages_FullMethodName    = "/delivery.v2.DeliveryService/AddPackages"
	DeliveryService_GetPackages_FullMethodName    = "/delivery.v2.DeliveryService/GetPackages"
)

// DeliveryServiceClient is the client API for DeliveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveryServiceClient interface {
	GetPackageInfo(ctx context.Context, in *GetPackageInfoRequest, opts ...grpc.CallOption) (*GetPackageInfoResponse, error)
	GetNewPackages(ctx context.Context, in *GetPackageInfoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Package], error)
	AddPackages(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Package, AddPackageResponse], error)
	GetPackages(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetPackageInfoRequest, GetPackageInfoResponse], error)
}

type deliveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryServiceClient(cc grpc.ClientConnInterface) DeliveryServiceClient {
	return &deliveryServiceClient{cc}
}

func (c *deliveryServiceClient) GetPackageInfo(ctx context.Context, in *GetPackageInfoRequest, opts ...grpc.CallOption) (*GetPackageInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPackageInfoResponse)
	err := c.cc.Invoke(ctx, DeliveryService_GetPackageInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryServiceClient) GetNewPackages(ctx context.Context, in *GetPackageInfoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Package], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DeliveryService_ServiceDesc.Streams[0], DeliveryService_GetNewPackages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetPackageInfoRequest, Package]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeliveryService_GetNewPackagesClient = grpc.ServerStreamingClient[Package]

func (c *deliveryServiceClient) AddPackages(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Package, AddPackageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DeliveryService_ServiceDesc.Streams[1], DeliveryService_AddPackages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Package, AddPackageResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeliveryService_AddPackagesClient = grpc.ClientStreamingClient[Package, AddPackageResponse]

func (c *deliveryServiceClient) GetPackages(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetPackageInfoRequest, GetPackageInfoResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DeliveryService_ServiceDesc.Streams[2], DeliveryService_GetPackages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetPackageInfoRequest, GetPackageInfoResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeliveryService_GetPackagesClient = grpc.BidiStreamingClient[GetPackageInfoRequest, GetPackageInfoResponse]

// DeliveryServiceServer is the server API for DeliveryService service.
// All implementations must embed UnimplementedDeliveryServiceServer
// for forward compatibility.
type DeliveryServiceServer interface {
	GetPackageInfo(context.Context, *GetPackageInfoRequest) (*GetPackageInfoResponse, error)
	GetNewPackages(*GetPackageInfoRequest, grpc.ServerStreamingServer[Package]) error
	AddPackages(grpc.ClientStreamingServer[Package, AddPackageResponse]) error
	GetPackages(grpc.BidiStreamingServer[GetPackageInfoRequest, GetPackageInfoResponse]) error
	mustEmbedUnimplementedDeliveryServiceServer()
}

// UnimplementedDeliveryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeliveryServiceServer struct{}

func (UnimplementedDeliveryServiceServer) GetPackageInfo(context.Context, *GetPackageInfoRequest) (*GetPackageInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackageInfo not implemented")
}
func (UnimplementedDeliveryServiceServer) GetNewPackages(*GetPackageInfoRequest, grpc.ServerStreamingServer[Package]) error {
	return status.Errorf(codes.Unimplemented, "method GetNewPackages not implemented")
}
func (UnimplementedDeliveryServiceServer) AddPackages(grpc.ClientStreamingServer[Package, AddPackageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AddPackages not implemented")
}
func (UnimplementedDeliveryServiceServer) GetPackages(grpc.BidiStreamingServer[GetPackageInfoRequest, GetPackageInfoResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetPackages not implemented")
}
func (UnimplementedDeliveryServiceServer) mustEmbedUnimplementedDeliveryServiceServer() {}
func (UnimplementedDeliveryServiceServer) testEmbeddedByValue()                         {}

// UnsafeDeliveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryServiceServer will
// result in compilation errors.
type UnsafeDeliveryServiceServer interface {
	mustEmbedUnimplementedDeliveryServiceServer()
}

func RegisterDeliveryServiceServer(s grpc.ServiceRegistrar, srv DeliveryServiceServer) {
	// If the following call pancis, it indicates UnimplementedDeliveryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeliveryService_ServiceDesc, srv)
}

func _DeliveryService_GetPackageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackageInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).GetPackageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryService_GetPackageInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).GetPackageInfo(ctx, req.(*GetPackageInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryService_GetNewPackages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPackageInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeliveryServiceServer).GetNewPackages(m, &grpc.GenericServerStream[GetPackageInfoRequest, Package]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeliveryService_GetNewPackagesServer = grpc.ServerStreamingServer[Package]

func _DeliveryService_AddPackages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeliveryServiceServer).AddPackages(&grpc.GenericServerStream[Package, AddPackageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeliveryService_AddPackagesServer = grpc.ClientStreamingServer[Package, AddPackageResponse]

func _DeliveryService_GetPackages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeliveryServiceServer).GetPackages(&grpc.GenericServerStream[GetPackageInfoRequest, GetPackageInfoResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeliveryService_GetPackagesServer = grpc.BidiStreamingServer[GetPackageInfoRequest, GetPackageInfoResponse]

// DeliveryService_ServiceDesc is the grpc.ServiceDesc for DeliveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeliveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "delivery.v2.DeliveryService",
	HandlerType: (*DeliveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPackageInfo",
			Handler:    _DeliveryService_GetPackageInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNewPackages",
			Handler:       _DeliveryService_GetNewPackages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddPackages",
			Handler:       _DeliveryService_AddPackages_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetPackages",
			Handler:       _DeliveryService_GetPackages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/delivery_v2.proto",
}
